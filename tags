!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/paul/dev/c/simpl-mpc/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
AUTHORS	simpl-mpc.1	/^.SH AUTHORS$/;"	s	title:simpl-mpc
About	README.md	/^About$/;"	s	chapter:SIMPL-MPC
BG_AQUA	include/interface.h	/^  BG_AQUA = 7,$/;"	e	enum:colors
BG_BLUE	include/interface.h	/^  BG_BLUE = 5,$/;"	e	enum:colors
BG_GREEN	include/interface.h	/^  BG_GREEN = 6,$/;"	e	enum:colors
BG_WHITE	include/interface.h	/^  BG_WHITE = 4,$/;"	e	enum:colors
BIN_DIR	build/config.mk	/^BIN_DIR = ${PREFIX}\/bin$/;"	m
CC	build/config.mk	/^CC ?= cc$/;"	m
CLEAR	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
CONFIGURATION	simpl-mpc.1	/^.SH CONFIGURATION$/;"	s	title:simpl-mpc
CONFIG_H	include/config.h	/^#define CONFIG_H$/;"	d
Configuration	README.md	/^Configuration$/;"	s	chapter:SIMPL-MPC
DEBUG_CFLAGS	build/config.mk	/^DEBUG_CFLAGS = ${CFLAGS} -UNDEBUG -O0 -g -ggdb -Wall -Wextra -Wno-unused-parameter$/;"	m
DESCRIPTION	simpl-mpc.1	/^.SH DESCRIPTION$/;"	s	title:simpl-mpc
EXIT	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
GENERAL	include/config.h	/^  GENERAL, SIDE, MAIN,$/;"	e	enum:context
GREEN	include/interface.h	/^  GREEN = 3,$/;"	e	enum:colors
INCS	build/config.mk	/^INCS = -I ..\/include$/;"	m
INPUT_H	include/input.h	/^#define INPUT_H$/;"	d
INTERFACE_H	include/interface.h	/^#define INTERFACE_H$/;"	d
Installation	README.md	/^Installation$/;"	s	chapter:SIMPL-MPC
KEYBINDS	simpl-mpc.1	/^.SH KEYBINDS$/;"	s	title:simpl-mpc
LIBS	build/config.mk	/^LIBS = -lncurses -lmpdclient$/;"	m
LICENSE	simpl-mpc.1	/^.SH LICENSE$/;"	s	title:simpl-mpc
Licence	README.md	/^Licence$/;"	s	chapter:SIMPL-MPC
MAIN	include/config.h	/^  GENERAL, SIDE, MAIN,$/;"	e	enum:context
MAIN_BOTTOM	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAIN_DOWN	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAIN_SIDE	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAIN_START	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAIN_TOP	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAIN_UP	include/config.h	/^  MAIN_DOWN, MAIN_UP, MAIN_SIDE, MAIN_START, MAIN_TOP, MAIN_BOTTOM,$/;"	e	enum:function
MAN_DIR	build/config.mk	/^MAN_DIR = ${PREFIX}\/share\/man$/;"	m
MAX	include/input.h	/^#define MAX(/;"	d
MAX_ALBUM	include/music_data.h	/^#define MAX_ALBUM /;"	d
MAX_MEM_SEARCH	include/mpd_instance.h	/^#define MAX_MEM_SEARCH /;"	d
MAX_STR_LEN	include/mpd_instance.h	/^#define MAX_STR_LEN /;"	d
MAX_TRACK	include/music_data.h	/^#define MAX_TRACK /;"	d
MIN	include/mpd_instance.h	/^#define MIN(/;"	d
MORE INFORMATION	simpl-mpc.1	/^.SH MORE INFORMATION$/;"	s	title:simpl-mpc
MPD_INSTANCE_H	include/mpd_instance.h	/^#define MPD_INSTANCE_H$/;"	d
MUSIC_DATA_H	include/music_data.h	/^#define MUSIC_DATA_H$/;"	d
NAME	simpl-mpc.1	/^.SH NAME $/;"	s	title:simpl-mpc
NEXT	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
PAUSE	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
PREFIX	build/config.mk	/^PREFIX ?= \/usr$/;"	m
PREVIOUS	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
RED	include/interface.h	/^  RED = 2,$/;"	e	enum:colors
REPEAT	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
SEE ALSO	simpl-mpc.1	/^.SH SEE ALSO$/;"	s	title:simpl-mpc
SEEK_BACKWARD	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
SEEK_FORWARD	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
SHUFFLE	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
SIDE	include/config.h	/^  GENERAL, SIDE, MAIN,$/;"	e	enum:context
SIDE_BOTTOM	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIDE_DOWN	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIDE_MAIN	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIDE_START	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIDE_TOP	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIDE_UP	include/config.h	/^  SIDE_DOWN, SIDE_UP, SIDE_MAIN, SIDE_START, SIDE_TOP, SIDE_BOTTOM,$/;"	e	enum:function
SIMPL-MPC	README.md	/^SIMPL-MPC$/;"	c
SRC	build/Makefile	/^SRC = ..\/source\/*.c$/;"	m
STRIP	build/config.mk	/^STRIP ?= strip$/;"	m
SYNOPSIS	simpl-mpc.1	/^.SH SYNOPSIS$/;"	s	title:simpl-mpc
VERSION	build/config.mk	/^VERSION = 0.2$/;"	m
VOLUME_DOWN	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
VOLUME_UP	include/config.h	/^  EXIT, PAUSE, NEXT, PREVIOUS, VOLUME_UP, VOLUME_DOWN, SHUFFLE, REPEAT, CLEAR, SEEK_FORWARD, SEE/;"	e	enum:function
WHITE	include/interface.h	/^  WHITE =  1,$/;"	e	enum:colors
album	include/music_data.h	/^  char **album;$/;"	m	struct:music_data	typeref:typename:char **
album	include/music_data.h	/^  char **album;$/;"	m	struct:raw_music_data	typeref:typename:char **
album_index	include/music_data.h	/^  int album_index;$/;"	m	struct:music_data_index	typeref:typename:int
album_playing	include/interface.h	/^  int album_playing;$/;"	m	struct:ui_param	typeref:typename:int
album_selected	include/interface.h	/^  int album_selected;$/;"	m	struct:ui_param	typeref:typename:int
album_size	include/music_data.h	/^  int *album_size;$/;"	m	struct:music_data	typeref:typename:int *
artist	include/music_data.h	/^  char **artist;$/;"	m	struct:music_data	typeref:typename:char **
artist	include/music_data.h	/^  char **artist;$/;"	m	struct:raw_music_data	typeref:typename:char **
bar_window	include/interface.h	/^  WINDOW *bar_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
clean	build/Makefile	/^clean:$/;"	t
colors	include/interface.h	/^enum colors {$/;"	g
command_input	include/config.h	/^static const char *command_input = "";$/;"	v	typeref:typename:const char *
context	include/config.h	/^ const enum context context;$/;"	m	struct:key	typeref:typename:const enum context
context	include/config.h	/^enum context {$/;"	g
ctrl	include/config.h	/^#define ctrl(/;"	d
current_duration	include/interface.h	/^  unsigned int current_duration;$/;"	m	struct:ui_param	typeref:typename:unsigned int
date	include/music_data.h	/^  short *date;$/;"	m	struct:music_data	typeref:typename:short *
date	include/music_data.h	/^  short *date;$/;"	m	struct:raw_music_data	typeref:typename:short *
debug	build/Makefile	/^debug:  clean$/;"	t
destroy_interface	source/interface.c	/^destroy_interface ( struct interface *interface )$/;"	f	typeref:typename:void
duration	include/music_data.h	/^  unsigned int **duration;$/;"	m	struct:music_data	typeref:typename:unsigned int **
duration	include/music_data.h	/^  unsigned int *duration;$/;"	m	struct:raw_music_data	typeref:typename:unsigned int *
free_interface	source/interface.c	/^free_interface ( struct interface *interface )$/;"	f	typeref:typename:void
free_music_data	source/music_data.c	/^free_music_data ( struct music_data *music_data )$/;"	f	typeref:typename:void
free_raw_music_data	source/music_data.c	/^free_raw_music_data ( struct raw_music_data *raw_music_data )$/;"	f	typeref:typename:void
function	include/config.h	/^ const enum function function;$/;"	m	struct:key	typeref:typename:const enum function
function	include/config.h	/^enum function {$/;"	g
get_index_music_data	source/music_data.c	/^get_index_music_data ( const char *in, struct music_data music_data )$/;"	f	typeref:struct:music_data_index
id	include/music_data.h	/^  char ***id;$/;"	m	struct:music_data	typeref:typename:char ***
id	include/music_data.h	/^  char **id;$/;"	m	struct:raw_music_data	typeref:typename:char **
index	include/music_data.h	/^  int index;$/;"	m	struct:music_data_index	typeref:typename:int
info_window	include/interface.h	/^  WINDOW *info_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
init_interface	source/interface.c	/^init_interface ( struct interface *interface )$/;"	f	typeref:typename:void
input_clear	source/input.c	/^input_clear ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_exit	source/input.c	/^input_exit ( struct mpd_connection *connection, struct interface *interface, struct music_data */;"	f	typeref:typename:void
input_general	source/input.c	/^input_general ( int key, struct interface *interface, struct music_data *music_data, struct mpd_/;"	f	typeref:typename:void
input_main	source/input.c	/^input_main ( int key, struct interface *interface, struct music_data music_data, struct mpd_conn/;"	f	typeref:typename:void
input_main_bottom	source/input.c	/^input_main_bottom (  WINDOW *main_window, struct ui_param *ui_param, struct ui_dimension ui_dime/;"	f	typeref:typename:void
input_main_down	source/input.c	/^input_main_down ( WINDOW *main_window, struct ui_param *ui_param, struct ui_dimension ui_dimensi/;"	f	typeref:typename:void
input_main_left	source/input.c	/^input_main_left ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct ui/;"	f	typeref:typename:void
input_main_top	source/input.c	/^input_main_top (  WINDOW *main_window, struct ui_param *ui_param, struct ui_dimension ui_dimensi/;"	f	typeref:typename:void
input_main_up	source/input.c	/^input_main_up ( WINDOW *main_window, struct ui_param *ui_param, struct ui_dimension ui_dimension/;"	f	typeref:typename:void
input_next	source/input.c	/^input_next ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_prev	source/input.c	/^input_prev ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_repeat	source/input.c	/^input_repeat ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_seek_backward	source/input.c	/^input_seek_backward ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_seek_forward	source/input.c	/^input_seek_forward ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_shuffle	source/input.c	/^input_shuffle ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_side	source/input.c	/^input_side ( int key, struct interface *interface, struct music_data music_data, struct mpd_conn/;"	f	typeref:typename:void
input_side_bottom	source/input.c	/^input_side_bottom ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct /;"	f	typeref:typename:void
input_side_down	source/input.c	/^input_side_down ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct ui/;"	f	typeref:typename:void
input_side_right	source/input.c	/^input_side_right ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct u/;"	f	typeref:typename:void
input_side_top	source/input.c	/^input_side_top ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct ui_/;"	f	typeref:typename:void
input_side_up	source/input.c	/^input_side_up ( WINDOW *side_window, WINDOW *main_window, struct ui_param *ui_param, struct ui_d/;"	f	typeref:typename:void
input_start_album	source/input.c	/^input_start_album ( struct mpd_connection *connection, struct ui_param ui_param, struct music_da/;"	f	typeref:typename:void
input_start_title	source/input.c	/^input_start_title ( struct mpd_connection *connection, struct ui_param ui_param, struct music_da/;"	f	typeref:typename:void
input_toggle_pause	source/input.c	/^input_toggle_pause ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_update	source/input.c	/^input_update ( struct mpd_connection *connection, struct ui_param ui_parma, struct music_data *m/;"	f	typeref:typename:void
input_volume_down	source/input.c	/^input_volume_down ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
input_volume_up	source/input.c	/^input_volume_up ( struct mpd_connection *connection, struct ui_param ui_param )$/;"	f	typeref:typename:void
install	build/Makefile	/^install: clean$/;"	t
interface	include/interface.h	/^struct interface {$/;"	s
key	include/config.h	/^ unsigned const int key;$/;"	m	struct:key	typeref:typename:unsigned const int
key	include/config.h	/^struct key {$/;"	s
keys	include/config.h	/^static struct key keys[] = {$/;"	v	typeref:struct:key[]
main	source/main.c	/^main(int argc, int *argv[])$/;"	f	typeref:typename:int
main_scroll	include/interface.h	/^  int main_scroll;$/;"	m	struct:ui_param	typeref:typename:int
main_window	include/interface.h	/^  WINDOW *main_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
mpd_get_metadata	source/mpd_instance.c	/^mpd_get_metadata ( struct mpd_connection **mpd_connection, struct raw_music_data *raw_music_data/;"	f	typeref:typename:void
mpd_instance_connect	source/mpd_instance.c	/^mpd_instance_connect ( struct mpd_connection **mpd_connection )$/;"	f	typeref:typename:void
mpd_sync	source/mpd_instance.c	/^mpd_sync ( struct mpd_connection **mpd_connection, struct music_data music_data, struct ui_param/;"	f	typeref:typename:void
music_data	include/music_data.h	/^struct music_data {$/;"	s
music_data_index	include/music_data.h	/^struct music_data_index {$/;"	s
on_main	include/interface.h	/^  bool on_main;$/;"	m	struct:ui_param	typeref:typename:bool
playing	include/interface.h	/^  bool playing;$/;"	m	struct:ui_param	typeref:typename:bool
print_bar_window	source/interface.c	/^print_bar_window ( WINDOW *bar_window, struct ui_param ui_param, struct ui_dimension ui_dimensio/;"	f	typeref:typename:void
print_info_window	source/interface.c	/^print_info_window ( WINDOW *info_window, struct ui_param ui_param, struct ui_dimension ui_dimens/;"	f	typeref:typename:void
print_interface	source/interface.c	/^print_interface ( struct interface *interface, struct music_data music_data )$/;"	f	typeref:typename:void
print_main_window	source/interface.c	/^print_main_window ( WINDOW *main_window, struct ui_param ui_param, struct ui_dimension ui_dimens/;"	f	typeref:typename:void
print_side_window	source/interface.c	/^print_side_window ( WINDOW *side_window, struct ui_param ui_param, struct ui_dimension ui_dimens/;"	f	typeref:typename:void
print_status_window	source/interface.c	/^print_status_window ( WINDOW *status_window, struct ui_param ui_param, struct ui_dimension ui_di/;"	f	typeref:typename:void
print_volume_window	source/interface.c	/^print_volume_window ( WINDOW *volume_window, struct ui_param ui_param, struct ui_dimension ui_di/;"	f	typeref:typename:void
qck_strcmp	source/music_data.c	/^qck_strcmp ( const char *a, const char *b )$/;"	f	typeref:typename:bool
qck_strcpy	source/mpd_instance.c	/^qck_strcpy ( char **dest, const char *source ) $/;"	f	typeref:typename:void
quick_sort_music_data	source/music_data.c	/^quick_sort_music_data ( struct music_data *music_data, int low, int high )$/;"	f	typeref:typename:void
raw_music_data	include/music_data.h	/^struct raw_music_data {$/;"	s
raw_to_music_data	source/music_data.c	/^raw_to_music_data ( struct raw_music_data raw_music_data, struct music_data *music_data )$/;"	f	typeref:typename:void
repeat	include/interface.h	/^  bool repeat;$/;"	m	struct:ui_param	typeref:typename:bool
right_bottom_width	include/interface.h	/^  int right_bottom_width;$/;"	m	struct:ui_dimension	typeref:typename:int
seek_incr	include/config.h	/^static const int seek_incr = 5;$/;"	v	typeref:typename:const int
set_default_ui	source/interface.c	/^set_default_ui ( struct interface *interface )$/;"	f	typeref:typename:void
set_ui_dimensions	source/interface.c	/^set_ui_dimensions ( struct interface *interface ) $/;"	f	typeref:typename:void
shuffle	include/interface.h	/^  bool shuffle;$/;"	m	struct:ui_param	typeref:typename:bool
side_scroll	include/interface.h	/^  int side_scroll;$/;"	m	struct:ui_param	typeref:typename:int
side_window	include/interface.h	/^  WINDOW *side_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
sidebar_width	include/interface.h	/^  int sidebar_width;$/;"	m	struct:ui_dimension	typeref:typename:int
simpl-mpc	build/Makefile	/^simpl-mpc: clean$/;"	t
simpl-mpc	simpl-mpc.1	/^.TH simpl-mpc 1 simpl-mpc$/;"	t
size	include/music_data.h	/^  int size;$/;"	m	struct:music_data	typeref:typename:int
size	include/music_data.h	/^  int size;$/;"	m	struct:raw_music_data	typeref:typename:int
sort_compare	source/music_data.c	/^sort_compare ( struct music_data music_data, int i, int j )$/;"	f	typeref:typename:int
sort_music_data	source/music_data.c	/^sort_music_data ( struct music_data *music_data )$/;"	f	typeref:typename:void
sort_swap	source/music_data.c	/^sort_swap ( struct music_data *music_data, int i, int j )$/;"	f	typeref:typename:void
status_window	include/interface.h	/^  WINDOW *status_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
title	include/music_data.h	/^  char ***title;$/;"	m	struct:music_data	typeref:typename:char ***
title	include/music_data.h	/^  char **title;$/;"	m	struct:raw_music_data	typeref:typename:char **
title_playing	include/interface.h	/^  int title_playing;$/;"	m	struct:ui_param	typeref:typename:int
title_selected	include/interface.h	/^  int title_selected;$/;"	m	struct:ui_param	typeref:typename:int
track	include/music_data.h	/^  short **track;$/;"	m	struct:music_data	typeref:typename:short **
track	include/music_data.h	/^  short *track;$/;"	m	struct:raw_music_data	typeref:typename:short *
ui_dimension	include/interface.h	/^  struct ui_dimension *ui_dimension;$/;"	m	struct:interface	typeref:struct:ui_dimension *
ui_dimension	include/interface.h	/^struct ui_dimension {$/;"	s
ui_param	include/interface.h	/^  struct ui_param *ui_param;$/;"	m	struct:interface	typeref:struct:ui_param *
ui_param	include/interface.h	/^struct ui_param {$/;"	s
uninstall	build/Makefile	/^uninstall:$/;"	t
volume	include/interface.h	/^  int volume;$/;"	m	struct:ui_param	typeref:typename:int
volume_incr	include/config.h	/^static const int volume_incr = 10;$/;"	v	typeref:typename:const int
volume_width	include/interface.h	/^  int volume_width;$/;"	m	struct:ui_dimension	typeref:typename:int
volume_window	include/interface.h	/^  WINDOW *volume_window;$/;"	m	struct:interface	typeref:typename:WINDOW *
